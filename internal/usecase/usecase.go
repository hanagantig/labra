// Code generated by goro;

package usecase

import (
	"context"
	"github.com/google/uuid"
	"labra/internal/entity"
	"time"
)

// This file was generated by the goro tool.

type checkupSvc interface {
	RegisterCheckup(ctx context.Context, checkup entity.CheckupResults) error
	UpdateCheckup(ctx context.Context, checkup entity.Checkup, newResults entity.MarkerResults, idsToDelete []int) error
	GetCheckupByFile(ctx context.Context, f entity.UploadedFile) (entity.Checkup, error)
	GetUserMarkerResults(ctx context.Context, profileID int, from, to time.Time, names []string) (entity.MarkerResults, error)
	GetList(ctx context.Context, profileID uuid.UUID) (entity.Checkups, error)
	GetListWithResults(ctx context.Context, profileUUID uuid.UUID, search string, filter entity.Filter) ([]entity.CheckupResults, error)
	GetByID(ctx context.Context, checkupID int) (entity.CheckupResults, error)
}

type userSvc interface {
	GetAuthUser(ctx context.Context, login entity.EmailOrPhone, pass entity.UserPassword) (entity.UserWithProfiles, error)
	CreateUser(ctx context.Context, login entity.EmailOrPhone, user entity.User) (entity.User, error)
	GetByUUID(ctx context.Context, uuid uuid.UUID) (entity.UserWithProfiles, error)
	GetByID(ctx context.Context, userID int) (entity.User, error)
	GetUserByLogin(ctx context.Context, login entity.EmailOrPhone) (entity.User, error)
	Verify(ctx context.Context, user entity.User, code string) error
}

type contactService interface {
	VerifyForUser(ctx context.Context, userID int, contact entity.Contact, associatedPatient entity.Profile) (entity.Contact, error)
	GetByValue(ctx context.Context, login entity.EmailOrPhone) (entity.Contact, error)
}

type otpService interface {
	VerifyOTP(ctx context.Context, code entity.OTPCode) error
	GetOTP(ctx context.Context, objType entity.OTPObjectType, objID int, code string) (entity.OTPCode, error)
}

type profileService interface {
	GetUserProfiles(ctx context.Context, userUUID uuid.UUID) (entity.Profiles, error)
	GetByID(ctx context.Context, userID, profileID int) (entity.Profile, error)
	GetAssociatedProfile(ctx context.Context, userID int) (entity.Profile, error)
	CreateForUser(ctx context.Context, userID int, profile entity.Profile) (entity.Profile, error)
	SoftDeletePatient(ctx context.Context, userID, patientID int) error
	MigrateToUser(ctx context.Context, profileID, userID int) error
}

type authService interface {
	NewSession(ctx context.Context, user entity.User, device entity.Device) (entity.Session, error)
	RefreshSession(ctx context.Context, session entity.Session) (entity.Session, error)
	GetSessionByToken(ctx context.Context, refreshToken entity.RefreshToken) (entity.Session, error)
}

type uploadService interface {
	UploadFile(ctx context.Context, profile entity.Profile, fileType string, bytes []byte) (entity.UploadedFile, error)
}

type fileService interface {
	StartRecognition(ctx context.Context, f entity.UploadedFile) error
	GetNewFiles(ctx context.Context) ([]entity.UploadedFile, error)
	GetRecognizingFiles(ctx context.Context) ([]entity.UploadedFile, error)
	GetPipelineResults(ctx context.Context, f entity.UploadedFile) (entity.CheckupResults, error)
	MarkAsDuplicate(ctx context.Context, f entity.UploadedFile) error
}

type notifyService interface {
	Notify(ctx context.Context, contact entity.Contact, templateID string, args map[string]string) error
}

type verifierService interface {
	VerifyUserContact(ctx context.Context, contact entity.Contact, code string) (entity.Contact, error)
	SendUserContactVerificationCode(ctx context.Context, contact entity.Contact) error
}

type markerService interface {
	GetAllMarkers(ctx context.Context) ([]entity.Marker, error)
}

type unitService interface {
	GetAllUnits(ctx context.Context) (entity.Units, error)
}

type labService interface {
	GetAllLabs() ([]entity.Lab, error)
}

type UseCase struct {
	checkupSvc  checkupSvc
	userSvc     userSvc
	contactSvc  contactService
	otpSvc      otpService
	profileSvc  profileService
	authSvc     authService
	uploadSvc   uploadService
	fileSvc     fileService
	notifySvc   notifyService
	verifierSvc verifierService
	unitSvc     unitService
	markerSvc   markerService
	labSvc      labService
}

func NewUseCase(
	checkupSvc checkupSvc,
	us userSvc,
	cs contactService,
	otp otpService,
	ps profileService,
	as authService,
	ups uploadService,
	fs fileService,
	ns notifyService,
	vs verifierService,
	ms markerService,
	units unitService,
	ls labService,
) *UseCase {
	return &UseCase{
		checkupSvc:  checkupSvc,
		userSvc:     us,
		contactSvc:  cs,
		otpSvc:      otp,
		profileSvc:  ps,
		authSvc:     as,
		uploadSvc:   ups,
		fileSvc:     fs,
		notifySvc:   ns,
		verifierSvc: vs,
		markerSvc:   ms,
		unitSvc:     units,
		labSvc:      ls,
	}
}
