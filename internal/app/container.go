// Code generated by goro; DO NOT EDIT.

package app

// This file was generated by the goro tool.
// Editing this file might prove futile when you re-run the goro commands

import (
	"context"
	firebase "firebase.google.com/go/v4"
	"github.com/jmoiron/sqlx"
	"google.golang.org/api/option"
	"labra/internal/adapter/filerepo/ocr"
	"labra/internal/adapter/filerepo/pdf"
	"labra/internal/adapter/messaging/email"
	checkuprepo "labra/internal/adapter/mysqlxrepo/checkup"
	"labra/internal/adapter/mysqlxrepo/codes"
	"labra/internal/adapter/mysqlxrepo/contacts"
	"labra/internal/adapter/mysqlxrepo/files"
	"labra/internal/adapter/mysqlxrepo/lab"
	"labra/internal/adapter/mysqlxrepo/marker"
	profilerepo "labra/internal/adapter/mysqlxrepo/profile"
	"labra/internal/adapter/mysqlxrepo/results"
	"labra/internal/adapter/mysqlxrepo/token"
	unitrepo "labra/internal/adapter/mysqlxrepo/unit"
	userrepo "labra/internal/adapter/mysqlxrepo/user"
	"labra/internal/adapter/webapi/deepseek"
	"labra/internal/adapter/webapi/docupanda"
	"labra/internal/config"
	"labra/internal/service/auth"
	"labra/internal/service/checkup"
	"labra/internal/service/contact"
	docupandasvc "labra/internal/service/docupanda"
	"labra/internal/service/file"
	"labra/internal/service/identifier"
	labsvc "labra/internal/service/lab"
	markersvc "labra/internal/service/marker"
	"labra/internal/service/ner"
	"labra/internal/service/notify"
	"labra/internal/service/otp"
	"labra/internal/service/parser"
	"labra/internal/service/profile"
	"labra/internal/service/recognizer"
	"labra/internal/service/scanner"
	"labra/internal/service/unit"
	"labra/internal/service/uploader"
	"labra/internal/service/user"
	"labra/internal/service/verifier"
	"log"

	"labra/internal/usecase"
)

type Container struct {
	mysqlx *sqlx.DB
	cfg config.Config
	deps map[string]interface{}
}

func NewContainer(mysqlxConn *sqlx.DB, cfg config.Config) *Container {

	return &Container{
		mysqlx: mysqlxConn,
		cfg:    cfg,
		deps: make(map[string]interface{}),
	}
}

func (c *Container) GetUseCase() *usecase.UseCase {
	return usecase.NewUseCase(
		c.getCheckupService(),
		c.getUserService(),
		c.getContactService(),
		c.getOTPService(),
		c.getProfileService(),
		c.getAuthService(),
		c.getUploadService(),
		c.getFileService(),
		c.getNotifyService(),
		c.getVerivierService(),
		c.getMarkerService(),
		c.getUnitService(),
		c.getLabService(),
	)
}

func (c *Container) getMysqlx() *sqlx.DB {
	return c.mysqlx
}

func (c *Container) getCheckupService() *checkup.Service {
	return checkup.NewService(c.getCheckupRepo(), c.getResultsRepo(), c.getMarkerRepo())
}

func (c *Container) getRecognizerService() *recognizer.Service {
	return recognizer.NewService(
		c.getParseService(),
		c.getScanService(),
		c.getIdentifierService(),
		c.getNerService(),
	)
}

func (c *Container) getParseService() *parser.Service {
	return parser.NewService(c.getLabRepo())
}

func (c *Container) getNerService() *ner.Service {
	return ner.NewService(c.getDeeoSeekRepo())
}

func (c *Container) getScanService() *scanner.Service {
	return scanner.NewService(c.getPDFRepo(), c.getOCRRepo())
}

func (c *Container) getIdentifierService() *identifier.Service {
	return identifier.NewService(c.getMarkerService(), c.getUnitService(), c.getLabService(), c.getProfileService())
}

func (c *Container) getMarkerService() *markersvc.Service {
	return markersvc.NewService(c.getMarkerRepo(), )
}

func (c *Container) getUnitService() *unit.Service {
	return unit.NewService(c.getUnitRepo())
}

func (c *Container) getUserService() *user.Service {
	return user.NewService(
		c.getUserRepo(),
		c.getContactService(),
		c.getProfileService(),
		c.getOTPService(),
		c.getNotifyService(),
	)
}

func (c *Container) getContactService() *contact.Service {
	return contact.NewService(c.getContactsRepo())
}

func (c *Container) getLabService() *labsvc.Service {
	return labsvc.NewService(c.getLabRepo())
}

func (c *Container) getProfileService() *profile.Service {
	return profile.NewService(c.getProfileRepo(), c.getContactService())
}

func (c *Container) getOTPService() *otp.Service {
	return otp.NewService(c.getCodeRepo())
}

func (c *Container) getNotifyService() *notify.Service {
	return notify.NewService(c.getEmailRepo())
}

func (c *Container) getLabRepo() *lab.Repository {
	return lab.NewRepository(c.getMysqlx())
}
func (c *Container) getUnitRepo() *unitrepo.Repository {
	return unitrepo.NewRepository(c.getMysqlx())
}

func (c *Container) getPDFRepo() *pdf.Repository {
	return pdf.NewRepository()
}

func (c *Container) getOCRRepo() *ocr.Repository {
	return ocr.NewRepository()
}

func (c *Container) getMarkerRepo() *marker.Repository {
	return marker.NewRepository(c.getMysqlx())
}

func (c *Container) getCheckupRepo() *checkuprepo.Repository {
	return checkuprepo.NewRepository(c.getMysqlx())
}

func (c *Container) getResultsRepo() *results.Repository {
	return results.NewRepository(c.getMysqlx())
}

func (c *Container) getUserRepo() *userrepo.Repository {
	return userrepo.NewRepository(c.getMysqlx())
}

func (c *Container) getProfileRepo() *profilerepo.Repository {
	return profilerepo.NewRepository(c.getMysqlx())
}

func (c *Container) getDeeoSeekRepo() deepseek.Repository {
	return deepseek.NewRepository("sk-9a0ef5d1bf80498f85613756aa40255d")
}

func (c *Container) getCodeRepo() *codes.Repository {
	return codes.NewRepository(c.getMysqlx())
}

func (c *Container) getDocupandaRepo() *docupanda.Repository {
	return docupanda.NewRepository(c.cfg.DocuPandaClient.BaseURL, c.cfg.DocuPandaClient.APIKey)
}

func (c *Container) getDocupandaService() *docupandasvc.Service {
	return docupandasvc.NewService(c.getDocupandaRepo(), c.getIdentifierService())
}

func (c *Container) getContactsRepo() *contacts.Repository {
	return contacts.NewRepository(c.getMysqlx())
}

func (c *Container) getAuthService() *auth.Service {
	return auth.NewService(
		c.cfg.Auth.AccessTokenSecret,
		c.cfg.Auth.AccessTokenSecret,
		c.cfg.Auth.RefreshTokenTTL,
		c.cfg.Auth.AccessTokenTTL,
		c.getTokenRepo(),
		)
}

func (c *Container) getFileRepo() *files.Repository {
	return files.NewRepository(c.getMysqlx())
}

func (c *Container) getFileService() *file.Service {
	return file.NewService(
		c.getFileRepo(),
		c.getDocupandaService(),
	)
}

func (c *Container) getUploadService() *uploader.Service {
	return uploader.NewService(
		c.getFileService(),
		c.getDocupandaService(),
	)
}

func (c *Container) getVerivierService() *verifier.Service {
	return verifier.NewService(
		c.getOTPService(),
		c.getNotifyService(),
		c.getProfileService(),
		c.getContactService(),
	)
}

func (c *Container) getTokenRepo() *token.Repository {
	return token.NewRepository(c.getMysqlx())
}

func (c *Container) getFirebaseApp() *firebase.App {
	opt := option.WithCredentialsFile("./serviceAccountKey.json")
	app, err := firebase.NewApp(context.Background(), nil, opt)
	if err != nil {
		log.Fatalf("error initializing app: %v", err)
	}

	return app
}

func (c *Container) getEmailRepo() *email.Repository {
	if dep,ok := c.deps["EmailRepo"].(*email.Repository); ok {
		return dep
	}

	r := email.NewRepository(
		c.cfg.Email.SMTPHost,
		c.cfg.Email.SMTPPort,
		c.cfg.Email.AuthEmail,
		c.cfg.Email.AuthPassword,
		c.cfg.Email.SenderEmail,
	)

	err := r.Ping()
	if err != nil {
		log.Fatalf("failed to initialize email repository: %v", err)
	}

	c.deps["EmailRepo"] = r

	return r
}