// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RefreshTokenRequest Refresh Token request data
//
// swagger:model RefreshTokenRequest
type RefreshTokenRequest struct {

	// refresh token
	// Required: true
	RefreshToken *string `json:"refresh_token"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RefreshTokenRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		RefreshToken *string `json:"refresh_token"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.RefreshToken = dataAO0.RefreshToken

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RefreshTokenRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		RefreshToken *string `json:"refresh_token"`
	}

	dataAO0.RefreshToken = m.RefreshToken

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this refresh token request
func (m *RefreshTokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefreshTokenRequest) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("refresh_token", "body", m.RefreshToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refresh token request based on context it is used
func (m *RefreshTokenRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RefreshTokenRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RefreshTokenRequest) UnmarshalBinary(b []byte) error {
	var res RefreshTokenRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
