// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User User object
//
// swagger:model User
type User struct {

	// f name
	FName string `json:"f_name"`

	// gender
	// Enum: ["M","F"]
	Gender string `json:"gender,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// joined at
	JoinedAt string `json:"joined_at"`

	// l name
	LName string `json:"l_name"`

	// username
	Username string `json:"username"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["M","F"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeGenderPropEnum = append(userTypeGenderPropEnum, v)
	}
}

const (

	// UserGenderM captures enum value "M"
	UserGenderM string = "M"

	// UserGenderF captures enum value "F"
	UserGenderF string = "F"
)

// prop value enum
func (m *User) validateGenderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeGenderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateGender(formats strfmt.Registry) error {
	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
