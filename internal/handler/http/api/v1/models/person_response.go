// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PersonResponse Person object
//
// swagger:model PersonResponse
type PersonResponse struct {

	// contacts
	Contacts []*Contact `json:"contacts,omitempty"`

	// date of birth
	DateOfBirth string `json:"date_of_birth,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// gender
	// Enum: ["M","F"]
	Gender string `json:"gender,omitempty"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this person response
func (m *PersonResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonResponse) validateContacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Contacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Contacts); i++ {
		if swag.IsZero(m.Contacts[i]) { // not required
			continue
		}

		if m.Contacts[i] != nil {
			if err := m.Contacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var personResponseTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["M","F"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		personResponseTypeGenderPropEnum = append(personResponseTypeGenderPropEnum, v)
	}
}

const (

	// PersonResponseGenderM captures enum value "M"
	PersonResponseGenderM string = "M"

	// PersonResponseGenderF captures enum value "F"
	PersonResponseGenderF string = "F"
)

// prop value enum
func (m *PersonResponse) validateGenderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, personResponseTypeGenderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PersonResponse) validateGender(formats strfmt.Registry) error {
	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this person response based on the context it is used
func (m *PersonResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonResponse) contextValidateContacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Contacts); i++ {

		if m.Contacts[i] != nil {

			if swag.IsZero(m.Contacts[i]) { // not required
				return nil
			}

			if err := m.Contacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PersonResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PersonResponse) UnmarshalBinary(b []byte) error {
	var res PersonResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
