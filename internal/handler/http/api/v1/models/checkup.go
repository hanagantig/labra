// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Checkup Checkup object
//
// swagger:model Checkup
type Checkup struct {

	// date
	Date int64 `json:"date"`

	// file id
	FileID string `json:"file_id,omitempty"`

	// id
	ID int64 `json:"id"`

	// lab
	Lab *Lab `json:"lab,omitempty"`

	// material
	Material string `json:"material,omitempty"`

	// profile
	Profile *Profile `json:"profile,omitempty"`

	// status
	// Enum: ["unverified","verified"]
	Status string `json:"status"`

	// tags
	Tags []*Tag `json:"tags"`

	// title
	Title string `json:"title"`
}

// Validate validates this checkup
func (m *Checkup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Checkup) validateLab(formats strfmt.Registry) error {
	if swag.IsZero(m.Lab) { // not required
		return nil
	}

	if m.Lab != nil {
		if err := m.Lab.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lab")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lab")
			}
			return err
		}
	}

	return nil
}

func (m *Checkup) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

var checkupTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unverified","verified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		checkupTypeStatusPropEnum = append(checkupTypeStatusPropEnum, v)
	}
}

const (

	// CheckupStatusUnverified captures enum value "unverified"
	CheckupStatusUnverified string = "unverified"

	// CheckupStatusVerified captures enum value "verified"
	CheckupStatusVerified string = "verified"
)

// prop value enum
func (m *Checkup) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, checkupTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Checkup) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Checkup) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this checkup based on the context it is used
func (m *Checkup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLab(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Checkup) contextValidateLab(ctx context.Context, formats strfmt.Registry) error {

	if m.Lab != nil {

		if swag.IsZero(m.Lab) { // not required
			return nil
		}

		if err := m.Lab.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lab")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lab")
			}
			return err
		}
	}

	return nil
}

func (m *Checkup) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.Profile != nil {

		if swag.IsZero(m.Profile) { // not required
			return nil
		}

		if err := m.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *Checkup) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Checkup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Checkup) UnmarshalBinary(b []byte) error {
	var res Checkup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
