// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Marker Marker with value
//
// swagger:model Marker
type Marker struct {

	// date
	Date int64 `json:"date"`

	// Marker ID from predefined list
	ID int64 `json:"id"`

	// name
	Name string `json:"name"`

	// reference range
	ReferenceRange *ReferenceRange `json:"reference_range,omitempty"`

	// Internal result ID
	ResultID int64 `json:"result_id,omitempty"`

	// unit
	Unit *Unit `json:"unit,omitempty"`

	// unrecognized name
	UnrecognizedName string `json:"unrecognized_name,omitempty"`

	// value
	Value float64 `json:"value"`
}

// Validate validates this marker
func (m *Marker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReferenceRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Marker) validateReferenceRange(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceRange) { // not required
		return nil
	}

	if m.ReferenceRange != nil {
		if err := m.ReferenceRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_range")
			}
			return err
		}
	}

	return nil
}

func (m *Marker) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this marker based on the context it is used
func (m *Marker) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReferenceRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Marker) contextValidateReferenceRange(ctx context.Context, formats strfmt.Registry) error {

	if m.ReferenceRange != nil {

		if swag.IsZero(m.ReferenceRange) { // not required
			return nil
		}

		if err := m.ReferenceRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_range")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_range")
			}
			return err
		}
	}

	return nil
}

func (m *Marker) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {

		if swag.IsZero(m.Unit) { // not required
			return nil
		}

		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Marker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Marker) UnmarshalBinary(b []byte) error {
	var res Marker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
