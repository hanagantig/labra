// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Profile Profile object
//
// swagger:model Profile
type Profile struct {

	// access
	// Enum: ["owner","editor","reader"]
	Access string `json:"access,omitempty"`

	// associated user
	// Format: uuid
	AssociatedUser strfmt.UUID `json:"associated_user,omitempty"`

	// contacts
	Contacts []*Contact `json:"contacts"`

	// date of birth
	DateOfBirth string `json:"date_of_birth"`

	// f name
	FName string `json:"f_name"`

	// gender
	// Enum: ["M","F"]
	Gender string `json:"gender,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// l name
	LName string `json:"l_name"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this profile
func (m *Profile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var profileTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["owner","editor","reader"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileTypeAccessPropEnum = append(profileTypeAccessPropEnum, v)
	}
}

const (

	// ProfileAccessOwner captures enum value "owner"
	ProfileAccessOwner string = "owner"

	// ProfileAccessEditor captures enum value "editor"
	ProfileAccessEditor string = "editor"

	// ProfileAccessReader captures enum value "reader"
	ProfileAccessReader string = "reader"
)

// prop value enum
func (m *Profile) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, profileTypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Profile) validateAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Access) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", m.Access); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateAssociatedUser(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedUser) { // not required
		return nil
	}

	if err := validate.FormatOf("associated_user", "body", "uuid", m.AssociatedUser.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateContacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Contacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Contacts); i++ {
		if swag.IsZero(m.Contacts[i]) { // not required
			continue
		}

		if m.Contacts[i] != nil {
			if err := m.Contacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var profileTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["M","F"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileTypeGenderPropEnum = append(profileTypeGenderPropEnum, v)
	}
}

const (

	// ProfileGenderM captures enum value "M"
	ProfileGenderM string = "M"

	// ProfileGenderF captures enum value "F"
	ProfileGenderF string = "F"
)

// prop value enum
func (m *Profile) validateGenderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, profileTypeGenderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Profile) validateGender(formats strfmt.Registry) error {
	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this profile based on the context it is used
func (m *Profile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Profile) contextValidateContacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Contacts); i++ {

		if m.Contacts[i] != nil {

			if swag.IsZero(m.Contacts[i]) { // not required
				return nil
			}

			if err := m.Contacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Profile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Profile) UnmarshalBinary(b []byte) error {
	var res Profile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
