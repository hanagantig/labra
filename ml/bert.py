from transformers import pipeline
import json

# üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å BERT –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ NER
ner_pipeline = pipeline("ner", model="d4data/biomedical-ner-all", aggregation_strategy="simple")

VALID_LABELS = {"B-Test", "I-Test", "B-Disease", "I-Disease", "B-Measurement", "I-Measurement"}

def extract_medical_data(text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–æ–≤"""
    entities = ner_pipeline(text)

    extracted_data = {"tests": [], "diseases": [], "measurements": []}

    for entity in entities:
        word, label = entity["word"], entity["entity_group"]

        print(label, word)
        if label in {"B-Test", "I-Test"}:
            extracted_data["tests"].append(word)
        elif label in {"B-Disease", "I-Disease"}:
            extracted_data["diseases"].append(word)
        elif label in {"B-Measurement", "I-Measurement"}:
            extracted_data["measurements"].append(word)

    return extracted_data

if __name__ == "__main__":
    # üìå –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ OCR-—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
    text = """
    –ü–∞—Ü–∏–µ–Ω—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
    –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: 23.02.2025
    –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: Invitro

    –ì–µ–º–æ–≥–ª–æ–±–∏–Ω 140 –≥/–ª 120-158
    –õ–µ–π–∫–æ—Ü–∏—Ç—ã 6.2 10‚Åπ/–ª 4.00-10.50
    –ì–ª—é–∫–æ–∑–∞ 5.6 –º–º–æ–ª—å/–ª 4.1-5.9
    """

    # üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ BERT
    structured_data = extract_medical_data(text)

    # üìå –í—ã–≤–æ–¥–∏–º JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    print(json.dumps(structured_data, indent=2, ensure_ascii=False))
